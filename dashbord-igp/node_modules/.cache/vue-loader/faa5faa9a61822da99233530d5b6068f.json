{"remainingRequest":"/home/assita/dashbord-igp/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/assita/dashbord-igp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/assita/dashbord-igp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/assita/dashbord-igp/src/components/header.vue?vue&type=template&id=29e8c3c6&","dependencies":[{"path":"/home/assita/dashbord-igp/src/components/header.vue","mtime":1637852236000},{"path":"/home/assita/dashbord-igp/node_modules/cache-loader/dist/cjs.js","mtime":1642074364992},{"path":"/home/assita/dashbord-igp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1642074366344},{"path":"/home/assita/dashbord-igp/node_modules/cache-loader/dist/cjs.js","mtime":1642074364992},{"path":"/home/assita/dashbord-igp/node_modules/vue-loader/lib/index.js","mtime":1642074365976}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}